@using Microsoft.AspNetCore.Components.Web
@namespace SampleBlazorProject.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="SampleBlazorProject.Web.UI.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <div id="wasm-loader" class="card" style="position: fixed;text-align:center;top: 5px;right: 5px;z-index: 999;">
        <div class="card-header">
            Wasm files loading
        </div>
        <div class="card-body">
            <div id="progressbar"></div>
        </div>
    </div>

    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script type="module">
        import { BrotliDecode } from './wasm/decode.min.js';

        var preLoadStart = 0;
        var preLoadCount = 0;
        var preLoadError = 0;
        var preLoadFinish = 0;

        function loadBootResource(type, name, defaultUri, integrity) {
            preLoadCount++;
            if (type !== 'dotnetjs' && location.hostname !== 'localhost') {
                return (async function () {
                    const response = await fetch(defaultUri + '.br', { cache: 'no-cache' });
                    preLoadFinish++;
                    if (!response.ok) {
                        preLoadError++;
                        throw new Error(response.statusText);
                    }
                    console.log(preLoadFinish + "/" + preLoadCount, name);
                    const originalResponseBuffer = await response.arrayBuffer();
                    const originalResponseArray = new Int8Array(originalResponseBuffer);
                    const decompressedResponseArray = BrotliDecode(originalResponseArray);
                    const contentType = type ===
                        'dotnetwasm' ? 'application/wasm' : 'application/octet-stream';

                    var progressbar = document.getElementById("progressbar");
                    if (progressbar) {
                        progressbar.style.cssText = "display:inline-block;width:300px;height:10px;;border:solid 1px gray;position:relative;"
                        progressbar.innerHTML = "<span style='position:absolute;left:0;background-color:darkgreen;height:10px;width:" + (300 * preLoadFinish / preLoadCount) + "px'></span>";
                    }
                    if (preLoadFinish == preLoadCount) {
                        var span = new Date().getTime() - preLoadStart;
                        console.log("All Done In " + span + " ms , " + preLoadError + " errors");
                        document.getElementById("wasm-loader").innerHTML = "";
                    }

                    return new Response(decompressedResponseArray,
                        { headers: { 'content-type': contentType } });
                })();
            }
        }
        function preLoadAll() {
            preLoadStart = new Date().getTime();
            var xh = new XMLHttpRequest();
            xh.open("GET", "wasm/_framework/blazor.boot.json", true);
            xh.onload = function () {
                var res = JSON.parse(xh.responseText);
                console.log(res);

                for (var p in res.resources.assembly)
                    loadBootResource("", p, "wasm/_framework/" + p, res.resources.assembly[p]);
                for (var p in res.resources.runtime)
                    loadBootResource("", p, "wasm/_framework/" + p, res.resources.assembly[p]);

                loadBootResource("manifest", "blazor.webassembly.js", "wasm/_framework/blazor.webassembly.js", "");
            }
            xh.send("");
        }
        preLoadAll();
    </script>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>
